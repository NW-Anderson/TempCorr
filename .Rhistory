}
# introduce small r mutation
geno[intro] <- .001
# proceeding to the equilibrium for these params
done <- F
while(done == F){
if(length(geno) != 32){stop('3')}
geno <- NewGeno(geno=geno,
par=par,
iter=50,
prnt = F,
tol = 10^-5)[[1]]
# geno <- NewGeno(geno=geno,
#                 par=par,
#                 iter="stable",
#                 prnt = F,
#                 tol = 10^-5)[[1]]
if(length(geno) != 32){stop('4')}
test.geno <- NewGeno(geno=geno,
par=par,
iter=100,
prnt = F,
tol = 10^-5)[[1]]
if(sum(abs(test.geno - geno)) < 10^(-4)){
done <- T
}
done <- T
geno <- test.geno
cat('bye')
rm(test.geno)
}
rm(done)
# saving eq freqs
postmut.eq.geno <- list(geno)
nullpar  <- c(1, #cd1
1, #cd2
h.vals[i],   #h1
.5,   #h2
1,   #h3
s.vals[1], #sel
.1,  # reduction due to sex geno mismatch
.1,  # r1
.1,  # r2
.1,  # r3
rf,   #rf
.9,  #gs  #no impact good
.5)   #u   #no impact good
param <- param.assign(par)
nullparam <- param.assign(nullpar)
results <- list(sum(geno[seq(2,32,by = 2)]), sum(gen(gen(geno,param), param, return.fit = T)) -
sum(gen(gen(geno,nullparam), nullparam, return.fit = T)), premut.eq.geno,
postmut.eq.geno)
names(results) <- c('freq', 'detload', 'preeq', 'posteq')
results
}
for(k in 1:(length(loop.results)/4)){
result.matrix[i,k] <- as.numeric(loop.results[[1 + 4*(k - 1)]])
devmatrix[i,k] <- as.numeric(loop.results[[2 + 4*(k - 1)]])
premut.eq.array <- cbind(premut.eq.array, loop.results[[3 +  4*(k-1)]])
postmut.eq.array <- cbind(postmut.eq.array, loop.results[[4 +  4*(k-1)]])
}
}
View(result.matrix)
View(postmut.eq.array)
View(premut.eq.array)
install.packages(doMPI)
install.packages("DOBAD")
install.packages("doMPI")
library(doMPI)
HPRC.pwr.fp.test <- function(ntaxa, oddrate){
##### PARAMS #####
#install.packages("phytools")
# nstall.packages("diversitree")
# install.packages("geiger")
library(R.utils)
library(doSNOW)
library(foreach)
cl<-makeCluster(2, type="SOCK")
registerDoSNOW(cl)
on.exit(stopCluster(cl))
library(phytools)
library(diversitree)
library(geiger)
library(profvis)
# source("fnx.R")
statistic = "mean"
# statistic = "min"
nul.model = "ind"
obs.model = "dep"
h1 = "greater"
# h1 = "lesser"
# h1 = 'twotail'
nul.iter = 3 #100 # number of null data points desired
stoc.iter = 3 #20 # number of stochastic maps per data point desired
message = T
plot = T
TO <- NULL
smp.size <- 4 #100
##### PARAMS #####
opts <- list(preschedule=FALSE)
sig.tests <- foreach(h = 1:smp.size, .options.multicore=opts,
.combine = 'c', .packages=c("phytools","diversitree","geiger")) %dopar% {
source("fnx.R", local = TRUE)
# ~9 hr
# start <- Sys.time()
# creating a random tree
tree <- trees(pars=c(1,.1), type="bd", max.taxa=ntaxa)[[1]]
tree$edge.length <- tree$edge.length/max(branching.times(tree))
# creating simulated tip state and organizing into a data frame
par <- rbind(c(0, .1, .5, 0), c(.1, 0, 0 ,.5), c(.5, 0, 0, oddrate), c(0, .5, .1, 0))
# tests if each state occurs in the stochastic mapping
good.data2 <- F
while(good.data2 == F){
# tests if the simulated tip states have an acceptable number of each state
good.data1 <- F
while(good.data1 == F){
data <- as.integer(rTraitDisc(phy = tree,
model = par,
k = 4,
states = 1:4,
root.value = sample(1:4, 1)))
# changes the 1 to 4 from rTraitDisc to 11,12,21,22 for entering testcorr function
data1 <- data2 <- c()
for(g in 1:length(data)){
if(data[g] == 1){
data1 <- c(data1, 1)
data2 <- c(data2, 1)
}else if(data[g] == 2){
data1 <- c(data1, 1)
data2 <- c(data2, 2)
}else if(data[g] == 3){
data1 <- c(data1, 2)
data2 <- c(data2, 1)
}else if(data[g] == 4){
data1 <- c(data1, 2)
data2 <- c(data2, 2)
}
}
if(sum(data1 == 1)>.3*ntaxa && sum(data1 == 1)<.7*ntaxa &&
sum(data2 == 1)>.3*ntaxa && sum(data2 == 1)<.7*ntaxa) good.data1 <- T
}
tip.dat <- data.frame(tree$tip.label,data1,data2)
tester <- VecCom(tip.dat)
if('12' %in% tester && '11' %in% tester && '21' %in% tester && '22' %in% tester) good.data2 <- T
}
# performing the tempcorr test on the simulated tree and data
rap <- TestCorr(tree,
tip.dat,
statistic,
h1,
nul.model,
obs.model,
nul.iter,
stoc.iter,
message,
plot)
# interested in the number of tests that return a significant result when none
# are supposed to
if(oddrate == .1){
rap$`p-values` < .05/8
}else{
# only interested in the times it returns a significant result
# in the type of transition with the oddrate
rap$`p-values`[[3]] < .05
}
# end <- Sys.time()
}
sig.tests <- unlist(sig.tests)
final.result <- sum(sig.tests) / smp.size
fle.nme <- paste('finalresult_odd=',oddrate,'_ntaxa=',ntaxa,'.RData', sep = '')
save(final.result, file = fle.nme)
# final.result[i, j] <- sum(sig.tests)/smp.size
# cat(' (',i,',',j,') ')
}
HPRC.pwr.fp.test(50,.1)
setwd("~/GitHub/TempCorr")
HPRC.pwr.fp.test(50,.1)
HPRC.pwr.fp.test <- function(ntaxa, oddrate){
##### PARAMS #####
#install.packages("phytools")
# nstall.packages("diversitree")
# install.packages("geiger")
library(R.utils)
library(doSNOW)
library(foreach)
cl<-makeCluster(1, type="SOCK")
registerDoSNOW(cl)
on.exit(stopCluster(cl))
library(phytools)
library(diversitree)
library(geiger)
library(profvis)
# source("fnx.R")
statistic = "mean"
# statistic = "min"
nul.model = "ind"
obs.model = "dep"
h1 = "greater"
# h1 = "lesser"
# h1 = 'twotail'
nul.iter = 3 #100 # number of null data points desired
stoc.iter = 3 #20 # number of stochastic maps per data point desired
message = T
plot = T
TO <- NULL
smp.size <- 4 #100
##### PARAMS #####
opts <- list(preschedule=FALSE)
sig.tests <- foreach(h = 1:smp.size, .options.multicore=opts,
.combine = 'c', .packages=c("phytools","diversitree","geiger",'R.utils')) %dopar% {
source("fnx.R", local = TRUE)
# ~9 hr
# start <- Sys.time()
# creating a random tree
tree <- trees(pars=c(1,.1), type="bd", max.taxa=ntaxa)[[1]]
tree$edge.length <- tree$edge.length/max(branching.times(tree))
# creating simulated tip state and organizing into a data frame
par <- rbind(c(0, .1, .5, 0), c(.1, 0, 0 ,.5), c(.5, 0, 0, oddrate), c(0, .5, .1, 0))
# tests if each state occurs in the stochastic mapping
good.data2 <- F
while(good.data2 == F){
# tests if the simulated tip states have an acceptable number of each state
good.data1 <- F
while(good.data1 == F){
data <- as.integer(rTraitDisc(phy = tree,
model = par,
k = 4,
states = 1:4,
root.value = sample(1:4, 1)))
# changes the 1 to 4 from rTraitDisc to 11,12,21,22 for entering testcorr function
data1 <- data2 <- c()
for(g in 1:length(data)){
if(data[g] == 1){
data1 <- c(data1, 1)
data2 <- c(data2, 1)
}else if(data[g] == 2){
data1 <- c(data1, 1)
data2 <- c(data2, 2)
}else if(data[g] == 3){
data1 <- c(data1, 2)
data2 <- c(data2, 1)
}else if(data[g] == 4){
data1 <- c(data1, 2)
data2 <- c(data2, 2)
}
}
if(sum(data1 == 1)>.3*ntaxa && sum(data1 == 1)<.7*ntaxa &&
sum(data2 == 1)>.3*ntaxa && sum(data2 == 1)<.7*ntaxa) good.data1 <- T
}
tip.dat <- data.frame(tree$tip.label,data1,data2)
tester <- VecCom(tip.dat)
if('12' %in% tester && '11' %in% tester && '21' %in% tester && '22' %in% tester) good.data2 <- T
}
# performing the tempcorr test on the simulated tree and data
rap <- TestCorr(tree,
tip.dat,
statistic,
h1,
nul.model,
obs.model,
nul.iter,
stoc.iter,
message,
plot)
# interested in the number of tests that return a significant result when none
# are supposed to
if(oddrate == .1){
rap$`p-values` < .05/8
}else{
# only interested in the times it returns a significant result
# in the type of transition with the oddrate
rap$`p-values`[[3]] < .05
}
# end <- Sys.time()
}
sig.tests <- unlist(sig.tests)
final.result <- sum(sig.tests) / smp.size
fle.nme <- paste('finalresult_odd=',oddrate,'_ntaxa=',ntaxa,'.RData', sep = '')
save(final.result, file = fle.nme)
# final.result[i, j] <- sum(sig.tests)/smp.size
# cat(' (',i,',',j,') ')
}
HPRC.pwr.fp.test(50,.1)
##### PARAMS #####
#install.packages("phytools")
# nstall.packages("diversitree")
# install.packages("geiger")
library(R.utils)
library(doSNOW)
library(foreach)
cl<-makeCluster(1, type="SOCK")
registerDoSNOW(cl)
on.exit(stopCluster(cl))
library(phytools)
library(diversitree)
library(geiger)
library(profvis)
# source("fnx.R")
statistic = "mean"
# statistic = "min"
nul.model = "ind"
obs.model = "dep"
h1 = "greater"
# h1 = "lesser"
# h1 = 'twotail'
nul.iter = 3 #100 # number of null data points desired
stoc.iter = 3 #20 # number of stochastic maps per data point desired
message = T
plot = T
TO <- NULL
smp.size <- 4 #100
ntaxa=50
oddrate = .1
source("fnx.R", local = TRUE)
# ~9 hr
# start <- Sys.time()
# creating a random tree
tree <- trees(pars=c(1,.1), type="bd", max.taxa=ntaxa)[[1]]
tree$edge.length <- tree$edge.length/max(branching.times(tree))
# creating simulated tip state and organizing into a data frame
par <- rbind(c(0, .1, .5, 0), c(.1, 0, 0 ,.5), c(.5, 0, 0, oddrate), c(0, .5, .1, 0))
# tests if each state occurs in the stochastic mapping
good.data2 <- F
while(good.data2 == F){
# tests if the simulated tip states have an acceptable number of each state
good.data1 <- F
while(good.data1 == F){
data <- as.integer(rTraitDisc(phy = tree,
model = par,
k = 4,
states = 1:4,
root.value = sample(1:4, 1)))
# changes the 1 to 4 from rTraitDisc to 11,12,21,22 for entering testcorr function
data1 <- data2 <- c()
for(g in 1:length(data)){
if(data[g] == 1){
data1 <- c(data1, 1)
data2 <- c(data2, 1)
}else if(data[g] == 2){
data1 <- c(data1, 1)
data2 <- c(data2, 2)
}else if(data[g] == 3){
data1 <- c(data1, 2)
data2 <- c(data2, 1)
}else if(data[g] == 4){
data1 <- c(data1, 2)
data2 <- c(data2, 2)
}
}
if(sum(data1 == 1)>.3*ntaxa && sum(data1 == 1)<.7*ntaxa &&
sum(data2 == 1)>.3*ntaxa && sum(data2 == 1)<.7*ntaxa) good.data1 <- T
}
tip.dat <- data.frame(tree$tip.label,data1,data2)
tester <- VecCom(tip.dat)
if('12' %in% tester && '11' %in% tester && '21' %in% tester && '22' %in% tester) good.data2 <- T
}
rap <- TestCorr(tree,
tip.dat,
statistic,
h1,
nul.model,
obs.model,
nul.iter,
stoc.iter,
message,
plot)
# interested in the number of tests that return a significant result when none
# are supposed to
if(oddrate == .1){
rap$`p-values` < .05/8
}else{
# only interested in the times it returns a significant result
# in the type of transition with the oddrate
rap$`p-values`[[3]] < .05
}
sig.tests <- unlist(sig.tests)
sig.tests <- foreach(h = 1:smp.size, .options.multicore=opts,
.combine = 'c', .packages=c("phytools","diversitree","geiger",'R.utils')) %dopar% {
source("fnx.R", local = TRUE)
# ~9 hr
# start <- Sys.time()
# creating a random tree
tree <- trees(pars=c(1,.1), type="bd", max.taxa=ntaxa)[[1]]
tree$edge.length <- tree$edge.length/max(branching.times(tree))
# creating simulated tip state and organizing into a data frame
par <- rbind(c(0, .1, .5, 0), c(.1, 0, 0 ,.5), c(.5, 0, 0, oddrate), c(0, .5, .1, 0))
# tests if each state occurs in the stochastic mapping
good.data2 <- F
while(good.data2 == F){
# tests if the simulated tip states have an acceptable number of each state
good.data1 <- F
while(good.data1 == F){
data <- as.integer(rTraitDisc(phy = tree,
model = par,
k = 4,
states = 1:4,
root.value = sample(1:4, 1)))
# changes the 1 to 4 from rTraitDisc to 11,12,21,22 for entering testcorr function
data1 <- data2 <- c()
for(g in 1:length(data)){
if(data[g] == 1){
data1 <- c(data1, 1)
data2 <- c(data2, 1)
}else if(data[g] == 2){
data1 <- c(data1, 1)
data2 <- c(data2, 2)
}else if(data[g] == 3){
data1 <- c(data1, 2)
data2 <- c(data2, 1)
}else if(data[g] == 4){
data1 <- c(data1, 2)
data2 <- c(data2, 2)
}
}
if(sum(data1 == 1)>.3*ntaxa && sum(data1 == 1)<.7*ntaxa &&
sum(data2 == 1)>.3*ntaxa && sum(data2 == 1)<.7*ntaxa) good.data1 <- T
}
tip.dat <- data.frame(tree$tip.label,data1,data2)
tester <- VecCom(tip.dat)
if('12' %in% tester && '11' %in% tester && '21' %in% tester && '22' %in% tester) good.data2 <- T
}
# performing the tempcorr test on the simulated tree and data
rap <- TestCorr(tree,
tip.dat,
statistic,
h1,
nul.model,
obs.model,
nul.iter,
stoc.iter,
message,
plot)
# interested in the number of tests that return a significant result when none
# are supposed to
if(oddrate == .1){
rap$`p-values` < .05/8
}else{
# only interested in the times it returns a significant result
# in the type of transition with the oddrate
rap$`p-values`[[3]] < .05
}
# end <- Sys.time()
}
##### PARAMS #####
opts <- list(preschedule=FALSE)
sig.tests <- foreach(h = 1:smp.size, .options.multicore=opts,
.combine = 'c', .packages=c("phytools","diversitree","geiger",'R.utils')) %dopar% {
source("fnx.R", local = TRUE)
# ~9 hr
# start <- Sys.time()
# creating a random tree
tree <- trees(pars=c(1,.1), type="bd", max.taxa=ntaxa)[[1]]
tree$edge.length <- tree$edge.length/max(branching.times(tree))
# creating simulated tip state and organizing into a data frame
par <- rbind(c(0, .1, .5, 0), c(.1, 0, 0 ,.5), c(.5, 0, 0, oddrate), c(0, .5, .1, 0))
# tests if each state occurs in the stochastic mapping
good.data2 <- F
while(good.data2 == F){
# tests if the simulated tip states have an acceptable number of each state
good.data1 <- F
while(good.data1 == F){
data <- as.integer(rTraitDisc(phy = tree,
model = par,
k = 4,
states = 1:4,
root.value = sample(1:4, 1)))
# changes the 1 to 4 from rTraitDisc to 11,12,21,22 for entering testcorr function
data1 <- data2 <- c()
for(g in 1:length(data)){
if(data[g] == 1){
data1 <- c(data1, 1)
data2 <- c(data2, 1)
}else if(data[g] == 2){
data1 <- c(data1, 1)
data2 <- c(data2, 2)
}else if(data[g] == 3){
data1 <- c(data1, 2)
data2 <- c(data2, 1)
}else if(data[g] == 4){
data1 <- c(data1, 2)
data2 <- c(data2, 2)
}
}
if(sum(data1 == 1)>.3*ntaxa && sum(data1 == 1)<.7*ntaxa &&
sum(data2 == 1)>.3*ntaxa && sum(data2 == 1)<.7*ntaxa) good.data1 <- T
}
tip.dat <- data.frame(tree$tip.label,data1,data2)
tester <- VecCom(tip.dat)
if('12' %in% tester && '11' %in% tester && '21' %in% tester && '22' %in% tester) good.data2 <- T
}
# performing the tempcorr test on the simulated tree and data
rap <- TestCorr(tree,
tip.dat,
statistic,
h1,
nul.model,
obs.model,
nul.iter,
stoc.iter,
message,
plot)
# interested in the number of tests that return a significant result when none
# are supposed to
if(oddrate == .1){
rap$`p-values` < .05/8
}else{
# only interested in the times it returns a significant result
# in the type of transition with the oddrate
rap$`p-values`[[3]] < .05
}
# end <- Sys.time()
}
